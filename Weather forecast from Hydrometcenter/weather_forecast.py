from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests
import feedparser
import re
from datetime import datetime
import pytz
import asyncio
import os
import logging
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

os.environ['TZ'] = 'Europe/Moscow'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_cities():
    try:
        with open("cities.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_cities():
    with open("cities.json", "w", encoding="utf-8") as file:
        json.dump(CITIES, file, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
CITIES = load_cities()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
last_weather_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏–∑ RSS
def get_weather_from_rss(city_name, city_code):
    try:
        rss_url = f"https://meteoinfo.ru/rss/forecasts/index.php?s={city_code}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
        }
        response = requests.get(rss_url, headers=headers)
        response.raise_for_status()
        feed = feedparser.parse(response.content)
        if feed.bozo:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ RSS –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}: {feed.bozo_exception}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ RSS –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}: {feed.bozo_exception}", None, []
        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏...
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}: {e}", None, []
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}: {e}")
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}: {e}", None, []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ Telegram
async def check_and_send_weather(context):
    try:
        TELEGRAM_CHAT_ID = context.bot_data.get("chat_id") or os.getenv("TELEGRAM_CHAT_ID")
        for city_name, city_code in CITIES.items():
            weather, update_time, parsed_data = get_weather_from_rss(city_name, city_code)
            last_update_time = last_weather_data.get(city_code, {}).get("update_time")
            if update_time != last_update_time:
                significant_change = False
                last_parsed_data = last_weather_data.get(city_code, {}).get("parsed_data", [])
                for i, current_entry in enumerate(parsed_data):
                    if i < len(last_parsed_data):
                        last_entry = last_parsed_data[i]
                        if (
                            current_entry["description"] != last_entry["description"] or
                            abs(current_entry["night_temp"] - last_entry["night_temp"]) > 5 or
                            abs(current_entry["day_temp"] - last_entry["day_temp"]) > 5 or
                            current_entry["wind_direction"] != last_entry["wind_direction"] or
                            abs(current_entry["wind_speed"] - last_entry["wind_speed"]) > 3 or
                            abs(current_entry["night_pressure"] - last_entry["night_pressure"]) > 5 or
                            abs(current_entry["day_pressure"] - last_entry["day_pressure"]) > 5 or
                            abs(current_entry["precipitation"] - last_entry["precipitation"]) > 20
                        ):
                            significant_change = True
                            break
                if significant_change or not last_update_time:
                    await context.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=weather, parse_mode="Markdown")
                    logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                last_weather_data[city_code] = {"update_time": update_time, "parsed_data": parsed_data}
            else:
                logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def start_scheduler(application):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_and_send_weather, 'interval', minutes=60, args=[application])
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ /add_city
async def add_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_city <–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞> <–ö–æ–¥ –≥–æ—Ä–æ–¥–∞>")
        return

    city_name, city_code = args
    CITIES[city_name] = city_code  # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å
    save_cities()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    await update.message.reply_text(f"‚úÖ –ì–æ—Ä–æ–¥ {city_name} —Å –∫–æ–¥–æ–º {city_code} –¥–æ–±–∞–≤–ª–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /remove_city
async def remove_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_city <–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>")
        return

    city_name = args[0]
    if city_name in CITIES:
        del CITIES[city_name]  # –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        save_cities()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        await update.message.reply_text(f"‚ùå –ì–æ—Ä–æ–¥ {city_name} —É–¥–∞–ª–µ–Ω.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /list_cities
async def list_cities(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not CITIES:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç.")
        return

    cities_list = "\n".join([f"üèôÔ∏è {city}: {code}" for city, code in CITIES.items()])
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:\n{cities_list}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", lambda update, context: update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")))
    application.add_handler(CommandHandler("add_city", add_city))
    application.add_handler(CommandHandler("remove_city", remove_city))
    application.add_handler(CommandHandler("list_cities", list_cities))

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    start_scheduler(application)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
